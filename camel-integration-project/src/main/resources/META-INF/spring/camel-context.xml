<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
   http://camel.apache.org/schema/spring
   http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!--ENVIRONMENT SETTINGS -->
    <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL">
            <!-- value>tcp://localhost:61616</value -->
            <value>vm://localhost</value>
        </property>
    </bean>

    <bean id="pooledJmsConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
          destroy-method="stop">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>

    <bean id="jmsConfig"
          class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledJmsConnectionFactory"/>
        <property name="concurrentConsumers" value="10"/>
    </bean>

    <bean id="activemq"
          class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>


    <!--INTEGRATION -->

    <bean id="MessageValidator" class="com.ipetrushin.syncher.integration.camel.beans.validators.MessageValidator"/>
    <bean id="ErrorsHandler" class="com.ipetrushin.syncher.integration.camel.beans.processors.ErrorsHandler"/>

    <!-- UnHandled EXEPTIONS
      Here, we define the dead-letter channel configuration we want to use.  We want to retry delivering a failed exchange
      twice and we also want to use exponential backoff between retries (so first retry after 1 second, second retry another
      2 seconds later).  After a total of 3 failed deliveries (1 initial delivery plus our 2 redeliveries), the message will
      be sent to the configured dead letter uri (direct:deadletter).
    -->
    <bean id="myDeadLetterErrorHandler" class="org.apache.camel.builder.DeadLetterChannelBuilder">
        <property name="deadLetterUri" value="activemq:deadLetters"/>
        <property name="redeliveryPolicy">
            <bean class="org.apache.camel.processor.RedeliveryPolicy">
                <property name="maximumRedeliveries" value="1"/>
                <property name="useExponentialBackOff" value="true"/>
            </bean>
        </property>
    </bean>


    <camelContext xmlns="http://camel.apache.org/schema/spring" errorHandlerRef="myDeadLetterErrorHandler">
        <onException>
            <exception>com.ipetrushin.syncher.request.exceptions.SynchronizeRequestException</exception>
            <redeliveryPolicy maximumRedeliveries="1"/>
            <!-- mark this as handled -->
            <handled>
                <constant>true</constant>
            </handled>
            <!-- let our order service handle this exception-->
            <process ref="ErrorsHandler"/>
            <to uri="activemq:output.response"/>
            <!-- and since this is a unit test we use mock for assertions -->

        </onException>

        <route id="integrationRoute">
            <from uri="activemq:input.request"/>
            <process ref="MessageValidator"/>
            <choice>
                <when>
                    <xpath>//*[local-name() = 'synchronizeResumeRequest']</xpath>

                    <multicast>
                        <choice>
                            <when>
                                <xpath>//*[local-name() = 'account'][@resourceName = 'monster.com']</xpath>
                                <to uri="activemq:monster"/>

                            </when>
                        </choice>

                        <choice>
                            <when>
                                <xpath>//*[local-name() = 'account'][@resourceName = 'hh.ru']</xpath>

                                <to uri="activemq:hh"/>
                                <!--   <to uri="file:syncher/jms/output/requests/hh/"/>   -->
                            </when>
                        </choice>
                    </multicast>


                </when>
                <when>
                    <xpath>//ns2:requestDeleteResume</xpath>
                    <log message="request-delete-resume"/>
                </when>
            </choice>

        </route>


        <!--
          This route starts with the direct:deadletter endpoint we used in the 'myDeadLetterErrorHandler' bean definition,
          so any exchanges that have failed delivery 3 times will be sent to this route.  The route itself logs a human-friendly
          error message and afterwards stores the failed message in the work/errors/deadletter folder.
        -->
        <route id="dlcRoute">
            <from uri="direct:deadletter"/>
            <log message="File ${file:name} was moved to the dead letter channel"/>
            <to uri="file:syncher/errors/deadletter"/>
        </route>


        <route id="outputRoute">
            <from uri="activemq:output.response"/>
            <choice>
                <when>
                    <xpath>//*[local-name() = 'synchronizeResumeResponse']</xpath>
                    <choice>
                        <when>
                            <xpath>//*[local-name() = 'error']</xpath>
                            <to uri="activemq:output.response.errors"/>
                        </when>
                    </choice>
                </when>
            </choice>
        </route>

    </camelContext>

</beans>
